// Generated by CoffeeScript 1.4.0
(function() {
  var Main, OutputStream, eyes, fs, util, _;

  fs = require('fs');

  util = require('util');

  _ = require('underscore');

  eyes = require('eyes');

  OutputStream = require('./OutputStream');

  /*
  * Gets input, parses as JSON, and writes output to its stream.
  */


  Main = (function() {

    function Main(options) {
      if (options == null) {
        options = {};
      }
      this.options = _.defaults({}, options, {
        color: true
      }, eyes.defaults);
      _.defaults(this.options.styles, eyes.defaults.styles);
      this.outputStream = new OutputStream({
        color: this.options.color
      });
      this.outputFn = this.getOutputFn();
      return;
    }

    Main.prototype.getOutputFn = function() {
      return eyes.inspector({
        styles: this.options.styles,
        maxLength: this.options.maxLength,
        pretty: this.options.pretty,
        hideFunctions: this.options.hideFunctions,
        stream: this.outputStream
      });
    };

    Main.prototype.parse = function(json) {
      return JSON.parse(json);
    };

    /*
    	* Accept input from a list of filenames.
    	* Read, parse, and output each in sequence.
    */


    Main.prototype.forFiles = function(filenames) {
      var self;
      self = this;
      filenames.forEach(function(filename) {
        var buffer, object, string;
        buffer = fs.readFileSync(filename);
        string = buffer.toString();
        object = self.parse(string);
        return self.outputFn(object);
      });
    };

    /*
    	* Accept input from a stream, then parse and output.
    */


    Main.prototype.fromStream = function(stream) {
      var capture, self;
      self = this;
      capture = '';
      stream.on('data', function(chunk) {
        return capture += chunk;
      });
      stream.on('end', function() {
        var object;
        object = self.parse(capture);
        return self.outputFn(object);
      });
    };

    /*
    	* Called for the command-line.
    */


    Main.prototype.command = function(args) {
      this.outputStream.pipe(process.stdout);
      if (args.length > 0) {
        this.forFiles(args);
      } else {
        process.stdin.resume();
        this.fromStream(process.stdin);
      }
    };

    return Main;

  })();

  module.exports = Main;

}).call(this);
